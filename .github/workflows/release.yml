name: Release Build

on:
  push:
    tags:
      - 'v*'  # 匹配 v 开头的 tag，比如 v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置 job 超时时间为 30 分钟
    strategy:
      matrix:
        platform:
          - { os: linux, arch: amd64 }
          - { os: linux, arch: arm64 }
          - { os: linux, arch: arm }
          - { os: windows, arch: amd64 }
          - { os: windows, arch: arm64 }
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 git 历史记录

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build frontend
        working-directory: web
        run: |
          npm install
          npm run build

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # 根据你的 Go 版本需求调整

      - name: Build backend
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
        run: |
          mkdir -p bin
          if [ "${{ matrix.platform.os }}" = "windows" ]; then
            go build -o bin/harbor-api-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.exe ./main.go
          else
            go build -o bin/harbor-api-${{ matrix.platform.os }}-${{ matrix.platform.arch }} ./main.go
          fi

      - name: Check if release exists
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: process.env.GITHUB_REF.replace('refs/tags/', '')
              })
              return true
            } catch (error) {
              if (error.status === 404) {
                return false
              }
              throw error
            }

      - name: Create Release
        if: steps.check_release.outputs.result == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/harbor-api-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.os == 'windows' && '.exe' || '' }}
          asset_name: harbor-api-${{ matrix.platform.os }}-${{ matrix.platform.arch }}${{ matrix.platform.os == 'windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream